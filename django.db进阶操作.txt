
          获取个数
         
          models.Tb1.objects.filter(name='seven').count()

          大于，小于
         
          models.Tb1.objects.filter(id__gt=1)                获取id大于1的值
          models.Tb1.objects.filter(id__gte=1)                获取id大于等于1的值
          models.Tb1.objects.filter(id__lt=10)               获取id小于10的值
          models.Tb1.objects.filter(id__lte=10)               获取id小于10的值
          models.Tb1.objects.filter(id__lt=10, id__gt=1)     获取id大于1 且 小于10的值

          in
         
          models.Tb1.objects.filter(id__in=[11, 22, 33])     获取id等于11、22、33的数据
          models.Tb1.objects.exclude(id__in=[11, 22, 33])    not in

          isnull
          Entry.objects.filter(pub_date__isnull=True)

          contains
         
          models.Tb1.objects.filter(name__contains="ven")
          models.Tb1.objects.filter(name__icontains="ven")   icontains大小写不敏感
          models.Tb1.objects.exclude(name__icontains="ven")

          range
         
          models.Tb1.objects.filter(id__range=[1, 2])     范围bettwen and

          其他类似
         
          startswith，istartswith, endswith, iendswith,

          order by
         
          models.Tb1.objects.filter(name='seven').order_by('id')      asc
          models.Tb1.objects.filter(name='seven').order_by('-id')     desc

          group by
         
          from django.db.models import Count, Min, Max, Sum
          models.Tb1.objects.filter(c1=1).values('id').annotate(c=Count('num'))
          SELECT "app01_tb1"."id", COUNT("app01_tb1"."num") AS "c" FROM "app01_tb1" WHERE "app01_tb1"."c1" = 1 GROUP BY "app01_tb1"."id"

          limit 、offset
         
          models.Tb1.objects.all()[10:20]

          regex正则匹配，iregex 不区分大小写
         
          Entry.objects.get(title__regex=r'^(An?|The) +')
          Entry.objects.get(title__iregex=r'^(an?|the) +')

          date
         
          Entry.objects.filter(pub_date__date=datetime.date(2005, 1, 1))
          Entry.objects.filter(pub_date__date__gt=datetime.date(2005, 1, 1))

          year
         
          Entry.objects.filter(pub_date__year=2005)
          Entry.objects.filter(pub_date__year__gte=2005)

          month
         
          Entry.objects.filter(pub_date__month=12)
          Entry.objects.filter(pub_date__month__gte=6)

          day
         
          Entry.objects.filter(pub_date__day=3)
          Entry.objects.filter(pub_date__day__gte=3)

          week_day
         
          Entry.objects.filter(pub_date__week_day=2)
          Entry.objects.filter(pub_date__week_day__gte=2)

          hour
         
          Event.objects.filter(timestamp__hour=23)
          Event.objects.filter(time__hour=5)
          Event.objects.filter(timestamp__hour__gte=12)

          minute
         
          Event.objects.filter(timestamp__minute=29)
          Event.objects.filter(time__minute=46)
          Event.objects.filter(timestamp__minute__gte=29)

          second
         
          Event.objects.filter(timestamp__second=31)
          Event.objects.filter(time__second=2)
          Event.objects.filter(timestamp__second__gte=31)







from django.db import models

# Create your models here.
class Book(models.Model):
    bid = models.AutoField(primary_key=True)
    bname = models.CharField(max_length=32)
    bpub_date = models.DateField(auto_now_add=True)
    bprice = models.DecimalField(max_digits=5, decimal_places=2)
    author = models.ManyToManyField('Author')
    publisher = models.ForeignKey('Publisher')

    def __str__(self):
        return self.bname


class Author(models.Model):
    aid = models.AutoField(primary_key=True)
    aname = models.CharField(max_length=32)
    aqq = models.IntegerField()
    publisher = models.ForeignKey('Publisher')

    def __str__(self):
        return self.aname


class AuthorDetail(models.Model):
    adid = models.AutoField(primary_key=True)
    aage = models.IntegerField()
    atel = models.IntegerField()
    author = models.OneToOneField('Author')


class Publisher(models.Model):
    pid = models.AutoField(primary_key=True)
    pname = models.CharField(max_length=100)
    ptel = models.IntegerField()
    paddr = models.CharField(max_length=1000)

双下划线跨表查询：
正向查询：
    根据本对象所在字段可以查出对应的对象及对象的属性；
    models.Book.objects.filter(author__aname='egon').values('publisher__pname ')
反向查询：
    和正向是一样的，只是查找的时候直接用类名，不需要加_set即可；


聚合查询：
from django.db.models import Avg,Count,Max,Min,Sum
models.Book.objects.aggregate(Avg('price'))


分组查询(annotate的意思是注解，可以产生一个新的字段给对象用)：
from django.db.models import Avg,Count,Max,Min,Sum
#按照每一本书分组:
models.Book.objects.annotate(book_count=Count('bid'))
#按照特定的字段分组:
models.Book.objects.values('publish__pid').annotate(book_count=Count('bid'))